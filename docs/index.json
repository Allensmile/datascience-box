[
{
	"uri": "/10-content/01-syllabus/",
	"title": "Course syllabus",
	"tags": [],
	"description": "",
	"content": "Course syllabus…\n"
},
{
	"uri": "/10-content/02-explore/02-01-data-viz/",
	"title": "Data visualization",
	"tags": [],
	"description": "",
	"content": "Some words.\nThen embed slides: Visualizing data\nLink to lab: Data wrangling and visualization\nAnd to HW: Gotta catch ’em all\n"
},
{
	"uri": "/00-hello/",
	"title": "Hello #dsbox",
	"tags": [],
	"description": "",
	"content": "This section provides an overview of setting up your data science course from scratch. Specifically this section discusses setting up an RStudio Cloud workspace, a GitHub organization, and the course website. We also discuss alternative setups for a similar course using some or all of the materials provided here.\n"
},
{
	"uri": "/00-hello/01-rscloud/",
	"title": "RStudio Cloud",
	"tags": [],
	"description": "",
	"content": "RStudio Cloud is a managed cloud instance of the RStudio IDE. We recommend having students access RStudio via RStudio Cloud as opposed to using a local installation. The main reason for this choice is reducing friction at first exposure to R. Local installation can be difficult to manage, both for the student and the instructor, and can shift the focus away from data science learning at the beginning of the course. In the pedagogical decisions section we discuss in further detail the reasons for avoiding local installation at the beginning of the course and discuss when to introduce it later on in the course.\nWhen you create an account on RStudio Cloud you get a workspace of your own, and the projects you create here are public to RStudio Cloud members. You can also add a new workspace and control its permissions, and the projects you create here can be public or private.\nAll student facing materials for this course have been organized in an RStudio Cloud workspace here. Soon you will have the option to copy that workspace and use it to organize assignments and assessments.\nThe big picture A natural way to set up a course in RStudio Cloud is using a private workspace. In this structure a classroom (a cohort of students in one semester of the course) maps to a workspace. Once a workspace is set up, instructors can invite students to the workspace via an invite link. Workspaces allow for various permission levels which can be assigned to students, teaching assistants, and instructors. Then, each assignment/project in the course maps to an RStudio Cloud project.\nRStudio Cloud classroom structure\n  Setting up your course in RStudio Cloud First, create a new workspace on RStudio Cloud. By default, this new workspace will be a private workspace. All it takes to create a new workspace is a name and brief information for the space. You can update the information once the space is created, however you can’t change the name of the space. For the name,\nI recommend using something along the lines of Course number - Semester.\nCreating a new workspace on RStudio Cloud\n Next step is to invite members to the workspace. You can do this by sending invitations or using a sharing link. I recommend using the latter approach for efficiency. Once all of your students are in the course (or once drop/add period ends) you can change the settings so that additional members cannot join throughout the semester using the sharing link, and can only be added via an invitation from the instructor.\nSetting workspace permissions\n As highlighted in the figure above, when a workspace is set to accept members via a shared link, the owner can also set a default permission level for those entering the workspace via the sharing link. Suggested permission levels and suggestions for mapping to course roles are as follows.\n  RStudio Cloud role Permissions Course role    Admin Manage users, view, edit and manage all projects Instructor  Moderator View, edit and manage all projects Teaching Assistant  Contributor Create, edit and manage their own projects Student  Viewer View projects shared with everyone Auditor, Visitor    This set of permissions will allow instructors full access including management of users. Teaching assistants will be able to peek into student projects, which can ve very useful when helping troubleshoot. Students won’t be able to see each others’ projects. Students auditing your course or visitors, such as colleagues wanting to view/experience your course setup will have limited access.\nRStudio Cloud also allows you to specify who can see the list of members. Admins and moderators can, by default, see all members of the workspace. I prefer to allow contributors (students) to see the list of members and viewers (auditors and visitors) to not since course enrollment information should not be available to non-official members of the course.\n Projects A project in RStudio Cloud is equivalent to an RStudio project. If you are an RStudio user, but you don’t use projects, I highly recommend considering switching your workflow to include projects. You can learn more about them here.\nA new project in RStudio Cloud is a new project in the RStudio IDE\n Access When you create a new project in your workspace, it is by default visible only to you plus the admins and moderators of the space. This default has two advantages:\nIt allows you to develop a project semi-privately and actively decide when the project is ready to be shared with students. This can be especially beneficial when developing an assessment like an exam. It means when a student creates a project in the workspace it’s not, by default, visible to other students.  When your project is ready to be shared with the students in your course, you can adjust the access level by clicking on the gear icon to reveal the settings menu.\nSetting project permissions within a workspace\n  Copying When a student clicks on your shared project, they are notified that this is a temporary copy (with red blinking text), and are given the option to make their own permanent copy of the project. This is the first thing a student should do when they start working on a project.\nWhen a student makes a copy of a project, a new project where they are the owner and that is only visible to them (and the admins and moderators of the space) is created. This copy contains all documents included in the original project and has all the packages installed (but not loaded) as well.\nMaking a copy of a project\n You will see in the above screenshot that the user (on the right) is not the admin of the course. This screenshot was taken when logged into the demo workspace as a student (contributor). I strongly recommend that instructors make a second account for themselves on RStudio Cloud and add that user as a contributor to the workspace to be see what your students see when they log in. It’s a great way to test out functionality and resolve unexpected issues your students might encounter, before they encounter them. I recommend using an incognito browser window for the student account so that you can stay logged in both as a student and as the instructor at the same time and test the student view as you develop content as an instructor.\nOne huge advantage of your students working in RStudio Cloud is that you as the instructor, and anyone with an admin and moderator role, can peek into student projects. While it is important for your students to learn to ask questions in a way that does not depend on someone else being able to see their work directly (and for this I strongly recommend teaching students to make reprexes), it is sometimes, especially early on, nice to be able to peek into a student’s project.\n  Base project template If you consistently use a particular set of packages and/or need a particular set of documents to be included in each project, the base project template functionality will come in very handy. You can use this by defining a base project template for the space. Simply create a new project and add any packages or files you want projects created in the space to start with. After creating your project, select it on the Settings page as the base project template.\nSelecting a base project template\n Note that a project must be shared with everyone in the space in order to be used as a template; only projects which are viewable by everyone in the space will appear in the templates list.\n Git integration It is possible to create (clone) a new project in RStudio Cloud from a GitHub repository, just like in the RStudio IDE.\nCreating a new project from GitHub repository\n If you have a base project template set up for your workspace, this new project created from GitHub will also have the packages installed in the base project template.\nFor more on using Git and GitHub in the classroom, see here.\n Limits Memory Each project on RStudio Cloud is allocated 1 GB of RAM. While this is a pretty generous limit, actions like joining large tables or fitting complicated models could exceed the limit.\nI recommend testing out the any work you assign, especiallty those using large datasets, in order to avoid unexpected hiccups due to out of memory issues. One challenge is that you might have no control over what issues students might run into if they are working on an open ended project using a dataset of their own choice. In these circumstances it’s helpful to keep in the back of your mind that one way an out of memory issue can present itself is with the RStudio Cloud project crashing.\n Users / projects Another limit that you will most likely hit when setting up your course on RStudio Cloud is that each account is allocated one private space, with up to three members and five projects. Once you hit this limit RStudio Cloud will prompt you to submit a request to the RStudio Cloud team for more capacity. Rest assured that this request will be approved.\n  RStudio Cloud is in alpha! RStudio Cloud in alpha. The development team is still adding important features and improving performance, reliability and availability. If you have any questions or feedback, you can reach out on the RStudio Community.\n "
},
{
	"uri": "/20-tech-stack/01-rscloud/",
	"title": "RStudio Cloud",
	"tags": [],
	"description": "",
	"content": "Instructions for assignment getting started and “submission” via Git Here are the steps for getting started:\n Go to the classroom GitHub organization and grab the link of the assignment repo. Start a new RStudio project from Git cloning this repository Make any changes needed as outlined by the tasks you need to complete for the assignment Make sure all your code chunks are informatively named, and these labels are not repeated Periodically commit changes (the more often the better, for example, once per each new task) Push all your changes back to your GitHub repo  and voila, you’re done! Once you push your changes back you do not need to do anything else to “submit” your work. And you can of course push multiple times throughout the assignment. At the time of the deadline we will take whatever is in your repo and consider it your final submission, and grade the state of your work at that time (which means even if you made mistakes before then, you wouldn’t be penalized for them as long as the final state of your work is correct).\n Continuous integration and badges Something new on this homework, and going forward on class assignments. Each time you push to GitHub a continuous integration tool (called wercker) will check to make sure your Rmd knits successfully. If it does, you’ll be able to see a badge on the README of your repo that says “build passing” (in green). If it fails, it’ll say “build failing” (in orange). If the build is failing you will need to fix your Rmd so that it knits without any errors and then push again. Some tips:\n You should avoid leaving your repo in a failing stage. You can click on the “build failing” badge to get more information. A “build passing” badge is not guarantee that your work is correct, but instead just that your Rmd file knits.  lab getting started\n Getting started  Go to the course organization on GitHub: https://github.com/Sta199-S18.\n Find the repo starting with lab-03 and that has your team name at the end (this should be the only lab-03 repo available to you).\n In the repo, click on the green Clone or download button, select Use HTTPS (this might already be selected by default, and if it is, you’ll see the text Clone with HTTPS as in the image below). Click on the clipboard icon to copy the repo URL.\n Go to RStudio Cloud and into the course workspace. Create a New Project from Git Repo. You will need to click on the down arrow next to the New Project button to see this option.\n Copy and paste the URL of your assignment repo into the dialog box:\n Hit OK, and you’re good to go!\n  Also for labs\n Housekeeping Git configuration Your email address is the address tied to your GitHub account and your name should be first and last name.  Go to the Terminal pane Type the following two lines of code, replacing the information in the quotation marks with your info.  git config --global user.email \u0026quot;your email\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; To confirm that the changes have been implemented, run the following:\ngit config --global user.email git config --global user.name  Password caching If you would like your git password cached for a week for this project, type the following in the Terminal:\ngit config --global credential.helper \u0026#39;cache --timeout 604800\u0026#39;  Project name: Currently your project is called Untitled Project. Update the name of your project to be “Lab 05 - Simpson’s paradox”.\n  Warm up Pick one team member to complete the steps in this section while the others contribute to the discussion but do not actually touch the files on their computer.\nBefore we introduce the data, let’s warm up with some simple exercises.\nYAML: Open the R Markdown (Rmd) file in your project, change the author name to your team name, and knit the document.\n Commiting and pushing changes:  Go to the Git pane in your RStudio. View the Diff and confirm that you are happy with the changes. Add a commit message like “Update team name” in the Commit message box and hit Commit. Click on Push. This will prompt a dialogue box where you first need to enter your user name, and then your password.   Pulling changes: Now, the remaining team members who have not been concurrently making these changes on their projects should click on the Pull button in their Git pane and observe that the changes are now reflected on their projects as well.\n  "
},
{
	"uri": "/10-content/",
	"title": "Course content",
	"tags": [],
	"description": "",
	"content": "An intro on course content section…\n"
},
{
	"uri": "/10-content/02-explore/",
	"title": "Exploring data",
	"tags": [],
	"description": "",
	"content": "This is where into to part 1 goes.\n"
},
{
	"uri": "/00-hello/02-github/",
	"title": "Git and GitHub",
	"tags": [],
	"description": "",
	"content": "Using Git and GitHub in the classroom…\n"
},
{
	"uri": "/20-tech-stack/02-git/",
	"title": "Git and GitHub",
	"tags": [],
	"description": "",
	"content": "Instructions for assignment getting started and “submission” via Git Here are the steps for getting started:\n Go to the classroom GitHub organization and grab the link of the assignment repo. Start a new RStudio project from Git cloning this repository Make any changes needed as outlined by the tasks you need to complete for the assignment Make sure all your code chunks are informatively named, and these labels are not repeated Periodically commit changes (the more often the better, for example, once per each new task) Push all your changes back to your GitHub repo  and voila, you’re done! Once you push your changes back you do not need to do anything else to “submit” your work. And you can of course push multiple times throughout the assignment. At the time of the deadline we will take whatever is in your repo and consider it your final submission, and grade the state of your work at that time (which means even if you made mistakes before then, you wouldn’t be penalized for them as long as the final state of your work is correct).\n Continuous integration and badges Something new on this homework, and going forward on class assignments. Each time you push to GitHub a continuous integration tool (called wercker) will check to make sure your Rmd knits successfully. If it does, you’ll be able to see a badge on the README of your repo that says “build passing” (in green). If it fails, it’ll say “build failing” (in orange). If the build is failing you will need to fix your Rmd so that it knits without any errors and then push again. Some tips:\n You should avoid leaving your repo in a failing stage. You can click on the “build failing” badge to get more information. A “build passing” badge is not guarantee that your work is correct, but instead just that your Rmd file knits.  lab getting started\n Getting started  Go to the course organization on GitHub: https://github.com/Sta199-S18.\n Find the repo starting with lab-03 and that has your team name at the end (this should be the only lab-03 repo available to you).\n In the repo, click on the green Clone or download button, select Use HTTPS (this might already be selected by default, and if it is, you’ll see the text Clone with HTTPS as in the image below). Click on the clipboard icon to copy the repo URL.\n Go to RStudio Cloud and into the course workspace. Create a New Project from Git Repo. You will need to click on the down arrow next to the New Project button to see this option.\n Copy and paste the URL of your assignment repo into the dialog box:\n Hit OK, and you’re good to go!\n  Also for labs\n Housekeeping Git configuration Your email address is the address tied to your GitHub account and your name should be first and last name.  Go to the Terminal pane Type the following two lines of code, replacing the information in the quotation marks with your info.  git config --global user.email \u0026quot;your email\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; To confirm that the changes have been implemented, run the following:\ngit config --global user.email git config --global user.name  Password caching If you would like your git password cached for a week for this project, type the following in the Terminal:\ngit config --global credential.helper \u0026#39;cache --timeout 604800\u0026#39;  Project name: Currently your project is called Untitled Project. Update the name of your project to be “Lab 05 - Simpson’s paradox”.\n  Warm up Pick one team member to complete the steps in this section while the others contribute to the discussion but do not actually touch the files on their computer.\nBefore we introduce the data, let’s warm up with some simple exercises.\nYAML: Open the R Markdown (Rmd) file in your project, change the author name to your team name, and knit the document.\n Commiting and pushing changes:  Go to the Git pane in your RStudio. View the Diff and confirm that you are happy with the changes. Add a commit message like “Update team name” in the Commit message box and hit Commit. Click on Push. This will prompt a dialogue box where you first need to enter your user name, and then your password.   Pulling changes: Now, the remaining team members who have not been concurrently making these changes on their projects should click on the Pull button in their Git pane and observe that the changes are now reflected on their projects as well.\n  "
},
{
	"uri": "/00-hello/03-blogdown/",
	"title": "Blogdown",
	"tags": [],
	"description": "",
	"content": "Setting up your course website with blogdown…\n"
},
{
	"uri": "/10-content/03-rigor/",
	"title": "Making rigorous conclusions",
	"tags": [],
	"description": "",
	"content": "This is where into to part 2 goes.\n"
},
{
	"uri": "/20-tech-stack/",
	"title": "Technology stack",
	"tags": [],
	"description": "",
	"content": "Intro on tech stack…\n"
},
{
	"uri": "/00-hello/04-alternatives/",
	"title": "Alternative setups",
	"tags": [],
	"description": "",
	"content": "Alternative ways of setting up your course…\n"
},
{
	"uri": "/10-content/04-forward/",
	"title": "Looking forward",
	"tags": [],
	"description": "",
	"content": "This part has a bunch of independent modules, each on a different topic. Pick and choose to your liking, depending on how much time you have to cover them.\n"
},
{
	"uri": "/10-content/04-forward/_index.knit/",
	"title": "Looking forward",
	"tags": [],
	"description": "",
	"content": "This part has a bunch of independent modules, each on a different topic. Pick and choose to your liking, depending on how much time you have to cover them.\n"
},
{
	"uri": "/10-content/04-forward/_index.utf8/",
	"title": "Looking forward",
	"tags": [],
	"description": "",
	"content": "This part has a bunch of independent modules, each on a different topic. Pick and choose to your liking, depending on how much time you have to cover them.\n"
},
{
	"uri": "/30-pedagogy/",
	"title": "Pedagogy",
	"tags": [],
	"description": "",
	"content": "Pedagogy stuff\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Data Science Course in a Box",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]