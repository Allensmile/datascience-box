[
{
	"uri": "/00-intro/02-dayone/",
	"title": "Day one",
	"tags": [],
	"description": "",
	"content": "You only get one first day of class, so start with something that excites students, teach the necessary evils later. This means getting to a meaningful, and hopefully interesting (for the students) data visualization as quickly as possible.\nWhat is data science? Data science is an exciting discipline that allows you to turn raw data into understanding, insight, and knowledge. We’re going to learn to do this in a tidy way – more on that later!\n What is this course? This is an introductory data science course designed for learners with no background in data science, programming, or statistics, but a willingness to learn in class and explore independently.\n Will we be doing computing? Yes. Is this an intro CS course? Not really, but many themes are shared. Is this an intro stat course? In a way, but it’s not your high school statistics course. What computing language will we learn? R. Why not language X? We can discuss that over :coffee:.   Data in the wild I like starting off by showing a few examples of easy to follow but not so simple data analyses done in R, preferably presented along with the R code. This should be the type of analysis they could do for their final project. Blog posts are often good examples for these. In Spring 2018 I used the following as examples:\n A year as told by fitbit by Nick Strayer R-Ladies global tour by Maelle Salmon Text analysis of Trump’s tweets confirms he writes only the (angrier) Android half by David Robinson   Your turn: UN Votes It’s now time to let the students work on their first data visualization in R.\nUsing the unvotes package, and a pre-populated R Markdown document on RStudio Cloud, they can create and modify the two multi-variate plots, visualizing the voting history of countries in the United Nations General Assembly.\nlibrary(unvotes) ## If you use data from the unvotes package, please cite the following: ## ## Erik Voeten \u0026quot;Data and Analyses of Voting in the UN General Assembly\u0026quot; Routledge Handbook of International Organization, edited by Bob Reinalda (published May 27, 2013) library(tidyverse) ## ── Attaching packages ──────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.5 ## ✔ tidyr 0.8.1 ✔ stringr 1.3.1 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ─────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(lubridate) ## ## Attaching package: \u0026#39;lubridate\u0026#39; ## The following object is masked from \u0026#39;package:base\u0026#39;: ## ## date We will narrow down the analysis to four countries: United States, Russian Federation, Mexico, and Turkey.\ncountry_list \u0026lt;- c(\u0026quot;United States of America\u0026quot;, \u0026quot;Russian Federation\u0026quot;, \u0026quot;Mexico\u0026quot;, \u0026quot;Turkey\u0026quot;) First we take a look at how often each country voted “yes” on a resolution in each year.\nun_votes %\u0026gt;% filter(country %in% country_list) %\u0026gt;% inner_join(un_roll_calls, by = \u0026quot;rcid\u0026quot;) %\u0026gt;% group_by(year = year(date), country) %\u0026gt;% summarize( votes = n(), percent_yes = mean(vote == \u0026quot;yes\u0026quot;) ) %\u0026gt;% ggplot(mapping = aes(x = year, y = percent_yes, color = country)) + geom_line() + labs( title = \u0026quot;Percentage of \u0026#39;Yes\u0026#39; votes in the UN General Assembly\u0026quot;, subtitle = \u0026quot;1946 to 2015\u0026quot;, y = \u0026quot;% Yes\u0026quot;, x = \u0026quot;Year\u0026quot;, color = \u0026quot;Country\u0026quot; ) And then, we create a visualization that compares how the voting record of the United States changed over time on a variety of issues, and compare it to another country.\nun_votes %\u0026gt;% filter(country %in% c(\u0026quot;United States of America\u0026quot;, \u0026quot;Turkey\u0026quot;)) %\u0026gt;% inner_join(un_roll_calls, by = \u0026quot;rcid\u0026quot;) %\u0026gt;% inner_join(un_roll_call_issues, by = \u0026quot;rcid\u0026quot;) %\u0026gt;% group_by(country, year = year(date), issue) %\u0026gt;% summarize( votes = n(), percent_yes = mean(vote == \u0026quot;yes\u0026quot;) ) %\u0026gt;% filter(votes \u0026gt; 5) %\u0026gt;% # only use records where there are more than 5 votes ggplot(mapping = aes(x = year, y = percent_yes, color = country)) + geom_point() + geom_smooth(method = \u0026quot;loess\u0026quot;, se = FALSE) + facet_wrap(~ issue) + labs( title = \u0026quot;Percentage of \u0026#39;Yes\u0026#39; votes in the UN General Assembly\u0026quot;, subtitle = \u0026quot;1946 to 2015\u0026quot;, y = \u0026quot;% Yes\u0026quot;, x = \u0026quot;Year\u0026quot;, color = \u0026quot;Country\u0026quot; ) At this point, instead of a formal introduction on R syntax, I recommend letting students change parameters passed to these functions, such as which countries are being plotted, and reknit the document to view the changes.\n[TO DO: Find a good way to insert slides.]\nLink to relevant slides: https://github.com/rstudio-education/datascience-box/tree/master/slides/p0_d01-welcome\n "
},
{
	"uri": "/00-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "This is not a book per se, at least not yet. It’s a place for organizing materials for teaching (and learning) data science with R, RStudio, the tidyverse and tidyverse friendly packages. It’s called Data Science Course in a Box, as it contains all the materials you (an educator) might need to teach data science or you (a learner) might find useful to learn about them.\nWho is this course for? The materials in this box are designed for learners who have no background in data science, statistics, or programming. However, they also assume that the learners are interested in making sense of (sometimes messy) data and willing to dive into the documentation of the packages we introduce.\n What is in the box?  Slides Labs Assignments Exams Infrastructure guide   How is the course content organized?  Part 1: Exploring data - wrangle + visualize + collect Part 2: Making rigorous conclusions - modeling + inference Part 3: Looking forward - …   Why R? Unlike most other software designed specifically for teaching statistics, R is free and open source, powerful, flexible, and relevant beyond the introductory statistics classroom. Arguments against using and teaching R at especially the introductory statistics level generally cluster around the following two points: teaching programming in addition to statistical concepts is challenging and the command line is more intimidating to beginners than the graphical user interface (GUI) most point-and-click type software offer.\nOne solution for these concerns is to avoid hands-on data analysis completely. If we do not ask our students to start with raw data and instead always provide them with small, tidy rectangles of data then there is never really a need for statistical software beyond spreadsheet or graphing calculator. This is not what we want in a modern statistics course and is a disservice to students.\nAnother solution is to use traditional point-and-click software for data analysis. The typical argument is that the GUI is easier for students to learn and so they can spend more time on statistical concepts. However, this ignores the fact that these software tools also have nontrivial learning curves. In fact, teaching specific data analysis tasks using such software often requires lengthy step-by-step instructions, with annotated screenshots, for navigating menus and other interface elements. Also, it is not uncommon that instructions for one task do not easily extend to another. Replacing such instructions with just a few lines of R code actually makes the instructional materials more concise and less intimidating.\nMany in the statistics education community are in favor of teaching R (or some other programming language, like Python) in upper level statistics courses, however the value of using R in introductory statistics courses is not as widely accepted. We acknowledge that this addition can be burdensome, however we would argue that learning a tool that is applicable beyond the introductory statistics course and that enhances students’ problem solving skills is a burden worth bearing.\n Why RStudio? The RStudio IDE includes a viewable environment, a file browser, data viewer, and a plotting pane, which makes it less intimidating than the bare R shell. Additionally, since it is a full fledged IDE, it also features integrated help, syntax highlighting, and context-aware tab completion, which are all powerful tools that help flatten the learning curve.\nStudents access the RStudio IDE through a centralized RStudio server instance, which allows us to provide students with uniform computing environments. Additionally, RStudio’s direct integration with other critically important tools for teaching computing best practices and reproducible research also influenced our decision for making it central in our toolkit.\nIt should be noted that we do not want to completely dissuade students from downloading and installing R and RStudio locally, we just do not want it to be a prerequisite for getting started. We have found that teaching personal setup is best done progressively throughout a semester, usually via one-on-one interactions during office hours or after class. Our goal is that all students will be able to continue using R even if they no longer have access to departmental resources.\n "
},
{
	"uri": "/00-intro/03-toolkit/",
	"title": "Meet the toolkit",
	"tags": [],
	"description": "",
	"content": "hello\n"
},
{
	"uri": "/00-intro/01-setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": "There are four things you need to run the code in this book: R, RStudio, a collection of R packages called the tidyverse, and a handful of other packages. Packages are the fundamental units of reproducible R code. They include reusable functions, the documentation that describes how to use them, and sample data.\nOn the Cloud You can access all on the cloud, via RStudio Cloud, and avoid local installation.\nSee RStudio Cloud workspace that you can copy (soon?) for your course.\n Locally [SOME OF WHAT’S BELOW IS BORROWED FROM R4DS AND HERE AS A PLACEHOLDER AND WILL BE REVISED AND REMOVED.]\nR To download R, go to CRAN, the comprehensive R archive network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. Don’t try and pick a mirror that’s close to you: instead use the cloud mirror, https://cloud.r-project.org, which automatically figures it out for you.\nA new major version of R comes out once a year, and there are 2-3 minor releases each year. It’s a good idea to update regularly. Upgrading can be a bit of a hassle, especially for major versions, which require you to reinstall all your packages, but putting it off only makes it worse.\n RStudio [TO DO: THERE ARE SOME WORDS BORROWED FROM R4DS BELOW, CLEAN THEM UP.]\nRStudio is an integrated development environment, or IDE, for R programming. Download and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. It’s a good idea to upgrade regularly so you can take advantage of the latest and greatest features.\n The tidyverse You’ll also need to install some R packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that you will learn in this book are part of the so-called tidyverse. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally.\nYou can install the complete tidyverse with a single line of code:\ninstall.packages(\u0026quot;tidyverse\u0026quot;) On your own computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install them on to your computer. If you have problems installing, make sure that you are connected to the internet, and that https://cloud.r-project.org/ isn’t blocked by your firewall or proxy.\nYou will not be able to use the functions, objects, and help files in a package until you load it with library(). Once you have installed a package, you can load it with the library() function:\nlibrary(tidyverse) ## ── Attaching packages ──────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.5 ## ✔ tidyr 0.8.1 ✔ stringr 1.3.1 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ─────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() This tells you that tidyverse is loading the ggplot2, tibble, tidyr, readr, purrr, and dplyr packages. These are considered to be the core of the tidyverse because you’ll use them in almost every analysis.\nPackages in the tidyverse change fairly frequently. You can see if updates are available, and optionally install them, by running tidyverse_update().\n Other packages There are many other excellent packages that are not part of the tidyverse, because they solve problems in a different domain, or are designed with a different set of underlying principles. This doesn’t make them better or worse, just different. In other words, the complement to the tidyverse is not the messyverse, but many other universes of interrelated packages. As you tackle more data science projects with R, you’ll learn new packages and new ways of thinking about data.\nIn this book we’ll use three data packages from outside the tidyverse:\ninstall.packages(c(\u0026quot;nycflights13\u0026quot;, \u0026quot;fivethirtyeight\u0026quot;)) [TO DO: ADD OTHERS]\nThese packages provide data on airline flights, world development, and baseball that we’ll use to illustrate key data science ideas.\n  "
},
{
	"uri": "/10-explore/",
	"title": "Exploring data",
	"tags": [],
	"description": "",
	"content": "This is where into to part 1 goes.\n"
},
{
	"uri": "/20-rigor/",
	"title": "Making rigorous conclusions",
	"tags": [],
	"description": "",
	"content": "This is where into to part 2 goes.\n"
},
{
	"uri": "/30-forward/",
	"title": "looking forward",
	"tags": [],
	"description": "",
	"content": "This part has a bunch of independent modules, each on a different topic. Pick and choose to your liking, depending on how much time you have to cover them.\n"
},
{
	"uri": "/40-infrastructure/",
	"title": "Infrastructure",
	"tags": [],
	"description": "",
	"content": "Intro to part 4 goes here.\n"
},
{
	"uri": "/50-git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": "Instructions for assignment getting started and “submission” via Git Here are the steps for getting started:\n Go to the classroom GitHub organization and grab the link of the assignment repo. Start a new RStudio project from Git cloning this repository Make any changes needed as outlined by the tasks you need to complete for the assignment Make sure all your code chunks are informatively named, and these labels are not repeated Periodically commit changes (the more often the better, for example, once per each new task) Push all your changes back to your GitHub repo  and voila, you’re done! Once you push your changes back you do not need to do anything else to “submit” your work. And you can of course push multiple times throughout the assignment. At the time of the deadline we will take whatever is in your repo and consider it your final submission, and grade the state of your work at that time (which means even if you made mistakes before then, you wouldn’t be penalized for them as long as the final state of your work is correct).\n Getting help Use the #questions channels on Slack to ask questions or posting on the GitHub Communiy. If your question is about an error you’re getting, make sure to clearly explain what generated the error as well as what the error says.\nYou are also welcomed to discuss the homework with each other broadly (no sharing code!) as well as ask questions at office hours.\n Continuous integration and badges Something new on this homework, and going forward on class assignments. Each time you push to GitHub a continuous integration tool (called wercker) will check to make sure your Rmd knits successfully. If it does, you’ll be able to see a badge on the README of your repo that says “build passing” (in green). If it fails, it’ll say “build failing” (in orange). If the build is failing you will need to fix your Rmd so that it knits without any errors and then push again. Some tips:\n You should avoid leaving your repo in a failing stage. You can click on the “build failing” badge to get more information. A “build passing” badge is not guarantee that your work is correct, but instead just that your Rmd file knits.  lab getting started\n Getting started  Go to the course organization on GitHub: https://github.com/Sta199-S18.\n Find the repo starting with lab-03 and that has your team name at the end (this should be the only lab-03 repo available to you).\n In the repo, click on the green Clone or download button, select Use HTTPS (this might already be selected by default, and if it is, you’ll see the text Clone with HTTPS as in the image below). Click on the clipboard icon to copy the repo URL.\n Go to RStudio Cloud and into the course workspace. Create a New Project from Git Repo. You will need to click on the down arrow next to the New Project button to see this option.\n Copy and paste the URL of your assignment repo into the dialog box:\n Hit OK, and you’re good to go!\n  Also for labs\n Housekeeping Git configuration Your email address is the address tied to your GitHub account and your name should be first and last name.  Go to the Terminal pane Type the following two lines of code, replacing the information in the quotation marks with your info.  git config --global user.email \u0026quot;your email\u0026quot; git config --global user.name \u0026quot;your name\u0026quot; To confirm that the changes have been implemented, run the following:\ngit config --global user.email git config --global user.name  Password caching If you would like your git password cached for a week for this project, type the following in the Terminal:\ngit config --global credential.helper \u0026#39;cache --timeout 604800\u0026#39;  Project name: Currently your project is called Untitled Project. Update the name of your project to be “Lab 05 - Simpson’s paradox”.\n  Warm up Pick one team member to complete the steps in this section while the others contribute to the discussion but do not actually touch the files on their computer.\nBefore we introduce the data, let’s warm up with some simple exercises.\nYAML: Open the R Markdown (Rmd) file in your project, change the author name to your team name, and knit the document.\n Commiting and pushing changes:  Go to the Git pane in your RStudio. View the Diff and confirm that you are happy with the changes. Add a commit message like “Update team name” in the Commit message box and hit Commit. Click on Push. This will prompt a dialogue box where you first need to enter your user name, and then your password.   Pulling changes: Now, the remaining team members who have not been concurrently making these changes on their projects should click on the Pull button in their Git pane and observe that the changes are now reflected on their projects as well.\n  "
},
{
	"uri": "/10-explore/11-data-viz/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Data visualization Some words.\nThen embed slides: Visualizing data\nLink to lab: Data wrangling and visualization\nAnd to HW: Gotta catch ’em all\n "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Data Science Course in a Box",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]